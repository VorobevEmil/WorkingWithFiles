@page "/"
@inject HttpClient httpClient
@using System.Security.Cryptography
@using System.Text
@using WorkingWithFiles.Shared
@using System.Net.Http.Json
@using WorkingWithFiles.Shared.Model


<MudTable Items="@Files" Loading="@loading" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Filter="new Func<FileModel,bool>(FilterFunc)" MultiSelection="true" @bind-SelectedItems="selectedFiles">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Работа с файлами</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Название файла</MudTh>
    </HeaderContent>
    <RowTemplate>

        <MudTd DataLabel="FileName">@context.FileName</MudTd>

    </RowTemplate>
    <PagerContent>
        <MudTablePager RowsPerPageString="Строк на странице:" />
    </PagerContent>
</MudTable>

<div class="d-flex flex-wrap mt-4">
    <MudSwitch @bind-Checked="@hover" Color="Color.Primary">Hover</MudSwitch>
    <MudSwitch @bind-Checked="@dense" Color="Color.Secondary">Dense</MudSwitch>
    <MudSwitch @bind-Checked="@striped" Color="Color.Tertiary">Striped</MudSwitch>
    <MudSwitch @bind-Checked="@bordered" Color="Color.Warning">Bordered</MudSwitch>
    <MudSpacer />
    <div style="min-width:200px;">
        <InputFile id="fileInput" OnChange="UploadFiles" hidden multiple />

        <MudButton HtmlTag="label"
                   Variant="Variant.Filled"
                   Color="Color.Primary"
                   StartIcon="@Icons.Filled.CloudUpload"
                   for="fileInput">
            Загрузить файл
        </MudButton>

        <MudButton OnClick="DeleteFile" Variant="Variant.Filled" StartIcon="@Icons.Filled.Delete" Color="Color.Secondary" Size="Size.Medium">Удалить файлы</MudButton>
    </div>
</div>

<MudSpacer />
<div style="min-width:200px;">
    <MudText Inline="true" Class="align-self-center">
        Выбранны файлы:
        @foreach (var file in selectedFiles)
        {
            <span class="">@file.FileName @(new string("\t"))</span>
        }
    </MudText>
</div>

@if (isDelete)
{
    <MudAlert Severity="Severity.Error" Variant="Variant.Filled">Файлы удалены</MudAlert>
}

@code {
    private bool isDelete = false;
    private bool loading = true;
    private bool dense = false;
    private bool hover = true;
    private bool striped = false;
    private bool bordered = false;
    private string searchString = string.Empty;
    private HashSet<FileModel> selectedFiles = new HashSet<FileModel>();

    private IEnumerable<FileModel>? Files = new List<FileModel>();

    protected override async Task OnInitializedAsync()
    {
        await LoadFiles();
    }

    private async Task LoadFiles()
    {
        loading = true;

        Files = await httpClient.GetFromJsonAsync<List<FileModel>>("api/Quality/GetFiles/Data");

        loading = false;
    }


    private bool FilterFunc(FileModel file)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;

        if (file?.FileName?.Contains(searchString, StringComparison.OrdinalIgnoreCase) ?? false)
            return true;

        return false;
    }

    private async Task DeleteFile()
    {
        loading = true;

        foreach (var file in selectedFiles)
        {
            await httpClient.PostAsJsonAsync("api/Quality/DeleteFile", file);
        }

        selectedFiles.Clear();

        await LoadFiles();
    }

    private async Task UploadFiles(InputFileChangeEventArgs e)
    {
        loading = true;

        var uploadedFiles = new List<UploadedFile>();
        foreach (var file in e.GetMultipleFiles())
        {
            Stream stream = file.OpenReadStream();
            MemoryStream ms = new MemoryStream();
            await stream.CopyToAsync(ms);
            stream.Close();


            UploadedFile uploadedFile = new UploadedFile();
            uploadedFile.FileName = file.Name;
            uploadedFile.FileContent = ms.ToArray();
            ms.Close();

            uploadedFiles.Add(uploadedFile);

        }
        await httpClient.PostAsJsonAsync<List<UploadedFile>>("api/Quality/UploadFiles", uploadedFiles);

        await LoadFiles();
    }
}